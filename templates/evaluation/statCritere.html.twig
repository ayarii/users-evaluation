{% extends 'base.html.twig' %}

{% block title %}Evaluation{% endblock %}

{% block content %}


<select id="parentDropdown">
    <option value="">Choisir une session</option>
    {% for sess in sessions %}
          <option value="{{sess.id}}"> {{sess.libelle}}</option>
    {% endfor %}
   
</select>

    <select id="childDropdownDep">
        <option value="">Choisir un département</option>
    </select>
       <select id="childDropdownEv">
        <option value="">Choisir une évaluation</option>
    </select>
    <select id="childDropdownCr">
        <option value="">Choisir un critère</option>
    </select>
<div style="width:400px;height:400px;">
    <canvas id="myPieChart" width="100" height="100"></canvas>
</div>

{% endblock %}
{% block scripts %}

   

    const parentDropdown = document.getElementById('parentDropdown');
    const childDropdownDep = document.getElementById('childDropdownDep');
    const ctx = document.getElementById('myPieChart').getContext('2d');

    let myPieChart;
 function updateChart() {
            const selectedValue = childDropdownCr.value;

            fetch(`/evaluation/getCrStat/?parentId=${selectedValue}`)
                .then(response => response.json())
                .then(data => {
                    const chartData = {
                        labels: ['>Moyenne', '< Moyenne'],
                        datasets: [{
                            data: [data.nbF[0].nbA, data.nbA[0].nbA],
                            backgroundColor: ['red', 'blue'],
                        }]
                    };

                  
                    if (myPieChart) {
                        myPieChart.destroy();
                    }

                   
                    myPieChart = new Chart(ctx, {
                        type: 'pie',
                        data: chartData,
                        options: {
                            responsive: true,
                            legend: {
                                display: true,
                                position: 'bottom',
                            },
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching data or updating the chart:', error);
                });
        }
    parentDropdown.addEventListener('change', function() {
        const selectedValue = this.value;

      
        fetch(`/evaluation/getDep/?parentId=${selectedValue}`)
            .then(response => response.json())
            .then(data => {
              
               
                let optionsHTML = '<option value="">Choisir un département</option>';
                for (const key in data) {
                  
                    if (data.hasOwnProperty(key)) {
                        optionsHTML += `<option value="${data[key].id}">${data[key].libelle}</option>`;
                    }
                }
                childDropdownDep.innerHTML = optionsHTML;
            })
            .catch(error => {
                console.error('Error fetching child dropdown options:', error);
            });
    });

  childDropdownDep.addEventListener('change', function() {
        const selectedValue = this.value;

      
        fetch(`/evaluation/getEv/?parentId=${selectedValue}`)
            .then(response => response.json())
            .then(data => {
              
               
                let optionsHTML = '<option value="">Choisir une évaluation</option>';
                for (const key in data) {
                    if (data.hasOwnProperty(key)) {
                        optionsHTML += `<option value="${data[key].id}">${data[key].libelle}</option>`;
                    }
                }
                childDropdownEv.innerHTML = optionsHTML;
            })
            .catch(error => {
                console.error('Error fetching child dropdown options:', error);
            });
    });
  childDropdownEv.addEventListener('change', function() {
        const selectedValue = this.value;

      
        fetch(`/evaluation/getCr/?parentId=${selectedValue}`)
            .then(response => response.json())
            .then(data => {
              
               
                let optionsHTML = '<option value="">Choisir un critère</option>';
                for (const key in data) {
                  
                    if (data.hasOwnProperty(key)) {
                        optionsHTML += `<option value="${data[key].id}">${data[key].libelle}</option>`;
                    }
                }
                childDropdownCr.innerHTML = optionsHTML;
            })
            .catch(error => {
                console.error('Error fetching child dropdown options:', error);
            });
    });
    childDropdownCr.addEventListener('change', function () {
            
            updateChart();
        });
    
{% endblock %}