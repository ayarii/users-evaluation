{% extends 'base.html.twig' %}

{% block title %}
	Tableau de Bord
{% endblock %}
{% block titlepage %}Tableau de Bord
{% endblock %}
{% block page %}Tableau de Bord
{% endblock %}

{% block content %}

	<div class="container-fluid">
		<div class="row">
			<div class="col-lg-3 col-6">
				<div class="small-box bg-info">
					<div class="inner">
						<h3>{{ nbutilisateurs }}</h3>
						<p>Utilisateurs</p>
					</div>
					<div class="icon">
						<i class="ion ion-bag"></i>
					</div>
					<a href="{{path('app_user_index')}}" class="small-box-footer">Plus D'informations
						<i class="fas fa-arrow-circle-right"></i>
					</a>
				</div>
			</div>

			<div class="col-lg-3 col-6">
				<div class="small-box bg-success">
					<div class="inner">
						<h3>{{ nsessions }}<sup style="font-size: 20px"></sup>
						</h3>
						<p>SESSIONS</p>
					</div>
					<div class="icon">
						<i class="ion ion-stats-bars"></i>
					</div>
					<a href="{{path('app_session_index')}}" class="small-box-footer">Plus D'informations
						<i class="fas fa-arrow-circle-right"></i>
					</a>
				</div>
			</div>

			<div class="col-lg-3 col-6">
				<div class="small-box bg-warning">
					<div class="inner">
						<h3>44</h3>
						<p>
							Bounce Rate
						</p>
					</div>
					<div class="icon">
						<i class="ion ion-person-add"></i>
					</div>
					<a href="#" class="small-box-footer">More info
						<i class="fas fa-arrow-circle-right"></i>
					</a>
				</div>
			</div>

			<div class="col-lg-3 col-6">
				<div class="small-box bg-danger">
					<div class="inner">
						<h3>65</h3>
						<p>Unique Visitors</p>
					</div>
					<div class="icon">
						<i class="ion ion-pie-graph"></i>
					</div>
					<a href="#" class="small-box-footer">More info
						<i class="fas fa-arrow-circle-right"></i>
					</a>
				</div>
			</div>
		</div>

		<div class="row" style="padding-top:20px">
			<div class="col-sm-6 col-xl-6 mb-4">
      <div class="card border-0 shadow" >
		<div class="card-header d-sm-flex flex-row align-items-center flex-0">
			<div class="d-block mb-3 mb-sm-0">
				<div class="fs-5 fw-normal mb-2">Nombre des badges par session</div>
			</div>
			
		</div>
		<div class="card-body p-2">
			<canvas id="badgeChart"  width="200" height="200"></canvas>
			<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		</div>
	</div>
      
      </div>

			<div class="col-12 col-sm-6 col-xl-6 mb-4">
				<div class="card border-0 shadow">
					<div class="card-header border-bottom d-flex align-items-center justify-content-between">
						<h2 class="fs-5 fw-bold mb-0">Utilisateurs par Département</h2>
					</div>
					<div class="card-body">

						<canvas id="usersChart" width="100" height="100"></canvas>

						<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
						<script>
							const usersData = {{ usersData|json_encode|raw }};

const ctx2 = document.getElementById('usersChart').getContext('2d');
const usersChart = new Chart(ctx2, {
type: 'doughnut',
data: {
labels: usersData.labels,
datasets: [
{
data: usersData.data,
backgroundColor: usersData.colors
}
]
}
});


			var badgeData = {{ badgesData|json_encode|raw }};
      console.log(badgeData);
var badgeChart = new Chart(document.getElementById('badgeChart'), {
type: 'line',
data: {

datasets: [
{
label: 'Nombre des badges',
data: badgeData,
fill: false,
borderColor: 'rgb(75, 192, 192)',
tension: 0.1
}
]
},
options: {
scales: {
y: {
beginAtZero: true
}
}
}
});

						</script>

					</div>
				</div>
			</div>
		</div>
	</div>
 <div class="card border-0 shadow">
 	<div class="card-header d-sm-flex flex-row align-items-center flex-0">
			<div class="d-block mb-3 mb-sm-0">
				<div class="fs-5 fw-normal mb-2">Nombre des utilisateurs classés par critère</div>
			</div>
			
		</div>

            <div style="margin-left:200px;">
             <select class="form-select" id="parentDropdown">
    <option value="">Choisir une session</option>
    {% for sess in sessions %}
          <option value="{{sess.id}}"> {{sess.libelle}}</option>
    {% endfor %}
   
</select>

    <select class="form-select" id="childDropdownDep">
        <option value="">Choisir un département</option>
    </select>
       <select class="form-select" id="childDropdownEv">
        <option value="">Choisir une évaluation</option>
    </select>
    <select class="form-select" id="childDropdownCr">
        <option value="">Choisir un critère</option>
    </select>
    </div>
<div style="width:400px;height:400px;margin-left:300px; ">
    <canvas id="myPieChart" width="100" height="100"></canvas>

</div>
</div>

{% endblock %}
{% block scripts %}

   

    const parentDropdown = document.getElementById('parentDropdown');
    const childDropdownDep = document.getElementById('childDropdownDep');
    const ctx = document.getElementById('myPieChart').getContext('2d');

    let myPieChart;
 function updateChart() {
            const selectedValue = childDropdownCr.value;

            fetch(`/evaluation/getCrStat/?parentId=${selectedValue}`)
                .then(response => response.json())
                .then(data => {
                    const chartData = {
                        labels: ['>Moyenne', '< Moyenne'],
                        datasets: [{
                            data: [data.nbF[0].nbA, data.nbA[0].nbA],
                            backgroundColor: ['#4da6ff','#cc0044'],
                        }]
                    };

                  
                    if (myPieChart) {
                        myPieChart.destroy();
                    }

                   
                    myPieChart = new Chart(ctx, {
                        type: 'pie',
                        data: chartData,
                        options: {
                            responsive: true,
                            legend: {
                                display: true,
                                position: 'bottom',
                            },
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching data or updating the chart:', error);
                });
        }
    parentDropdown.addEventListener('change', function() {
        const selectedValue = this.value;

      
        fetch(`/evaluation/getDep/?parentId=${selectedValue}`)
            .then(response => response.json())
            .then(data => {
              
               
                let optionsHTML = '<option value="">Choisir un département</option>';
                for (const key in data) {
                  
                    if (data.hasOwnProperty(key)) {
                        optionsHTML += `<option value="${data[key].id}">${data[key].libelle}</option>`;
                    }
                }
                childDropdownDep.innerHTML = optionsHTML;
            })
            .catch(error => {
                console.error('Error fetching child dropdown options:', error);
            });
    });

  childDropdownDep.addEventListener('change', function() {
        const selectedValue = this.value;

      
        fetch(`/evaluation/getEv/?parentId=${selectedValue}`)
            .then(response => response.json())
            .then(data => {
              
               
                let optionsHTML = '<option value="">Choisir une évaluation</option>';
                for (const key in data) {
                    if (data.hasOwnProperty(key)) {
                        optionsHTML += `<option value="${data[key].id}">${data[key].libelle}</option>`;
                    }
                }
                childDropdownEv.innerHTML = optionsHTML;
            })
            .catch(error => {
                console.error('Error fetching child dropdown options:', error);
            });
    });
  childDropdownEv.addEventListener('change', function() {
        const selectedValue = this.value;

      
        fetch(`/evaluation/getCr/?parentId=${selectedValue}`)
            .then(response => response.json())
            .then(data => {
              
               
                let optionsHTML = '<option value="">Choisir un critère</option>';
                for (const key in data) {
                  
                    if (data.hasOwnProperty(key)) {
                        optionsHTML += `<option value="${data[key].id}">${data[key].libelle}</option>`;
                    }
                }
                childDropdownCr.innerHTML = optionsHTML;
            })
            .catch(error => {
                console.error('Error fetching child dropdown options:', error);
            });
    });
    childDropdownCr.addEventListener('change', function () {
            
            updateChart();
        });
    

{% endblock %}
