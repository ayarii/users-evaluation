{% extends 'base.html.twig' %}

{% block title %}Users
{% endblock %}
{% block titlepage %}Users
{% endblock %}


{% block content %}
<style> input{
width:50px;

} </style>
	<div class="row">
		<div class="col-12">
			<br>
			{% for type, messages in app.flashes %}
				{% for message in messages %}
					<div class="alert alert-{{ type }} alert-dismissible fade show d-flex align-items-center">
						{% if type == 'success'%}
							<i class="fas fa-check-circle" style="padding-right: 10px"></i>
						{% elseif type == 'danger'%}
							<i class="fas fa-times-circle" style="padding-right: 10px"></i>
						{% endif %}
						<div>
							{{ message }}
						</div>
						<button type="button" class="close" data-dismiss="alert" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
				{% endfor %}
			{% endfor %}

			<br>
			<h1> Evaluation: {{evaluation.libelle}}</h1>
			<div class="card">
				<div class="card-header">
					<h3 class="card-title">Users</h3>
					
				<div class="card-body">
					<table id="example1" class="table table-bordered table-hover table-striped">
						<thead>
							<tr>
								
								<th>Utilisateur</th>
								{% set tot = 0 %}
                                {% for cr in criteres %}
								<th> {{cr.libelle }} /{{cr.ponderation }}</th>
                                
								{% set tot = tot + cr.ponderation %}
								{% endfor %}
                                <th> SCORE TOTAL / {{tot}} </th>
								
							</tr>
						</thead>
						<tbody>
							{% for user in users %}
								<tr>
									
									<td>{{ user.nom }} {{ user.prenom }}</td>
                                    {% for cr in criteres %}
                                    <form id="myform-{{user.id}}" action="{{ path('app_affectationnotes_submit',{'id': cr.idevaluation.id , 'userId': user.id}) }}" method="POST">
									<td> 
          <input type="number" step="0.01" id="{{cr.id}}{{user.id}}" name="{{cr.id}}{{user.id}}" data-form="myform-{{ user.id }}" oninput="checkInputValue(this,{{cr.ponderation}})"  >
  
  


{% endfor %}
</td>
 

<td class="total"> </td>
</form>


									
										
								</tr>
							{% else %}
								<tr>
									<td colspan="10">no records found</td>
								</tr>
							{% endfor %}
						</tbody>
						<tfoot>
							
						</tfoot>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>



{% endblock %}
{% block scripts %} 
   function updateRowTotal(row) {
  const totalCell = row.querySelector('.total');
  const inputsInRow = row.querySelectorAll('input');
  let rowTotal = 0;
  inputsInRow.forEach(input => {
    rowTotal += parseFloat(input.value) || 0;
  });
  totalCell.textContent = rowTotal.toFixed(2);
}
 
 const keyValueMap = new Map();


const inputs = document.querySelectorAll('input[data-form]');

     async function fetchInitialValues() {
    try {
      const response = await fetch('/affectationnotes/fetch-initial-values');
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
	    if (Array.isArray(data)) {
      for (const item of data) {
        const { userId, critereId, note } = item;
        const inputId = `${critereId}${userId}`;
        const input = document.getElementById(inputId);
        input.value = note;
        const row = input.closest('tr');
        updateRowTotal(row);
      }
    } else {
      console.error('Error fetching initial values: Response is not an array.');
    }
  } catch (error) {
    console.error('Error fetching initial values:', error);
  }
  }
  (async () => {
    const initialValues = await fetchInitialValues();
	
inputs.forEach(input => {
  	const formId = input.dataset.form;
  	const form = document.getElementById(formId);
 	const userId = formId.split('-')[1]; 
  	const critereId = input.id.replace(userId, ''); 

	input.value=initialValues[userId][critereId];
 

  
  });
  
})();
inputs.forEach(input => {
	const formId = input.dataset.form;
  	const form = document.getElementById(formId);
  input.addEventListener('keyup', function(event) {
      if (event.keyCode === 13) {
		
        event.preventDefault();
        const valuesArray = Array.from(keyValueMap.values());
        const hasValue = valuesArray.includes(false);

        if (hasValue === true) { 
          alert(`Verifiez les notes.`);
        } else {
          submitFormWithAjax(form);
          input.blur();
		
          const row = input.closest('tr');
          updateRowTotal(row);
        }
      }
    });});

 function checkInputValue(input, max) {
    const maxLimit = max;
    if (input.value > maxLimit) {
      alert(`La note doit etre inférieure à ${maxLimit}`);
	    input.style.border='3px solid red'
	  keyValueMap.set(input.id, false);
    
      return false; 
    } else if (input.value < 0) {
      alert('la note ne peut pas etre négative');
	    input.style.border='3px solid red'
  
      keyValueMap.set(input.id, false);
    }
	  input.style.border=''
    keyValueMap.set(input.id, true);

    
  }






  

  
function submitFormWithAjax(form) {
  const formData = new FormData(form);
  const url = form.action;
  const method = form.method;

  fetch(url, {
    method: method,
    body: formData
  })
  .then(response => response.json())
  .then(data => {
   
    if (data.success) {
      
    
      
    }
  })
  .catch(error => {
   
    console.error('Form submission error:', error);
  });
}


 
	
	{% endblock %}
